#!/usr/bin/env python3

# Copyright (c) 2015-2019 Clearmatics Technologies Ltd
#
# SPDX-License-Identifier: LGPL-3.0+

from zeth.zksnark import get_zksnark_provider
from zeth.prover_client import ProverClient
from commands.constants import \
    ZKSNARK_DEFAULT, PROVER_SERVER_ENDPOINT_DEFAULT, INSTANCEFILE_DEFAULT, \
    ADDRESSFILE_DEFAULT, WALLET_DIR_DEFAULT, ETH_RPC_ENDPOINT_DEFAULT, \
    MERKLE_TREE_FILE_DEFAULT
from commands.zeth_deploy import deploy
from commands.zeth_gen_address import gen_address
from commands.zeth_sync import sync
from commands.zeth_mix import mix
from commands.zeth_ls_notes import ls_notes
from commands.zeth_ls_commits import ls_commits
from commands.zeth_token_approve import token_approve
from click import group, command, option, pass_context, ClickException
from click_default_group import DefaultGroup
from typing import Any, Optional


@command()
@pass_context
def help(ctx) -> None:
    """
    Print help and exit
    """
    # Note, this command is implemented to ensure that an error is raised if no
    # subcommand is specified (which also catches errors in scripts).
    print(ctx.parent.get_help())
    raise ClickException("no command specified")


@group(cls=DefaultGroup, default_if_no_args=True, default="help")
@option(
    "--eth-rpc",
    default=ETH_RPC_ENDPOINT_DEFAULT,
    help=f"Ethereum rpc end-point")
@option(
    "--prover-server",
    default=PROVER_SERVER_ENDPOINT_DEFAULT,
    help=f"Prover server endpoint (default={PROVER_SERVER_ENDPOINT_DEFAULT})")
@option(
    "--zksnark",
    "zksnark_name",
    default=ZKSNARK_DEFAULT,
    help="GROTH16 or PGHR13 (default=GROTH16)")
@option(
    "--instance-file",
    default=INSTANCEFILE_DEFAULT,
    help=f"Instance file (default={INSTANCEFILE_DEFAULT})")
@option(
    "--address-file",
    default=ADDRESSFILE_DEFAULT,
    help=f"Instance file (default={ADDRESSFILE_DEFAULT})")
@option(
    "--wallet-dir",
    default=WALLET_DIR_DEFAULT,
    help=f"Wallet directory (default={WALLET_DIR_DEFAULT})")
@option(
    "--merkle-tree-file",
    default=MERKLE_TREE_FILE_DEFAULT,
    help=f"Merkle tree file (default={MERKLE_TREE_FILE_DEFAULT})")
@pass_context
def zeth(
        ctx: Any,
        eth_rpc: Optional[str],
        prover_server: str,
        zksnark_name: str,
        instance_file: str,
        address_file: str,
        wallet_dir: str,
        merkle_tree_file: str) -> None:
    if ctx.invoked_subcommand == "help":
        ctx.invoke(help)
    ctx.ensure_object(dict)
    ctx.obj["ETH_RPC"] = eth_rpc
    ctx.obj["PROVER_CLIENT"] = ProverClient(prover_server)
    ctx.obj["ZKSNARK"] = get_zksnark_provider(zksnark_name)
    ctx.obj["INSTANCE_FILE"] = instance_file
    ctx.obj["ADDRESS_FILE"] = address_file
    ctx.obj["WALLET_DIR"] = wallet_dir
    ctx.obj["MERKLE_TREE_FILE"] = merkle_tree_file


zeth.add_command(deploy)
zeth.add_command(gen_address)
zeth.add_command(sync)
zeth.add_command(mix)
zeth.add_command(ls_notes)
zeth.add_command(ls_commits)
zeth.add_command(token_approve)
zeth.add_command(help)


if __name__ == "__main__":
    zeth()  # pylint: disable=no-value-for-parameter
